// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGQ.Infra.Data.Context;

namespace SGQ.Infra.Data.Migrations
{
    [DbContext(typeof(SgqContext))]
    [Migration("20190905131112_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Acao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Descricao");

                    b.Property<DateTime>("Prazo");

                    b.Property<int>("Status");

                    b.Property<int>("TipoAcao");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.Property<int>("UsuarioResponsavelExecucaoId");

                    b.HasKey("Id");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Ambito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Nome");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.ToTable("Ambito");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Nome");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<int>("Ordem");

                    b.Property<int?>("ProcessoId");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessoId");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.EnumBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("TipoEnum");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("EnumBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TipoEnum = "PeriodicidadeVerificacaoProcesso",
                            Valor = "Diaria"
                        });
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Escopo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.ToTable("Escopo");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NaoConformidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnaliseCausaRaiz");

                    b.Property<string>("Codigo");

                    b.Property<DateTime>("DataAvaliacao");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Descricao");

                    b.Property<string>("Evidencia");

                    b.Property<string>("ProcessoId");

                    b.Property<int?>("ProcessoId1");

                    b.Property<int>("TipoConformidade");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.Property<int>("UsuarioResponsavelId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessoId1");

                    b.ToTable("NaoConformidade");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Norma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmbitoId");

                    b.Property<string>("Codigo");

                    b.Property<DateTime>("Data");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<int?>("NaoConformidadeId");

                    b.Property<string>("Nome");

                    b.Property<string>("Texto");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.HasIndex("AmbitoId");

                    b.HasIndex("NaoConformidadeId");

                    b.ToTable("Norma");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NormaEscopo", b =>
                {
                    b.Property<int>("NormaId");

                    b.Property<int>("EscopoId");

                    b.HasKey("NormaId", "EscopoId");

                    b.HasIndex("EscopoId");

                    b.ToTable("NormaEscopo");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NormaTema", b =>
                {
                    b.Property<int>("NormaId");

                    b.Property<int>("TemaId");

                    b.HasKey("NormaId", "TemaId");

                    b.HasIndex("TemaId");

                    b.ToTable("NormaTema");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Processo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Nome");

                    b.Property<int>("Periodo");

                    b.Property<int>("Status");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.ToTable("Processo");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataModificacao");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<string>("UsuarioCadastroId");

                    b.Property<string>("UsuarioModificacaoId");

                    b.HasKey("Id");

                    b.ToTable("Tema");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Cargo");

                    b.Property<string>("Codigo");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DataUltimoAcesso");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SGQ.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Processo")
                        .WithMany("Atividades")
                        .HasForeignKey("ProcessoId");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NaoConformidade", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Processo", "Processo")
                        .WithMany()
                        .HasForeignKey("ProcessoId1");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.Norma", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Ambito", "Ambito")
                        .WithMany()
                        .HasForeignKey("AmbitoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SGQ.Domain.Entities.NaoConformidade")
                        .WithMany("Normas")
                        .HasForeignKey("NaoConformidadeId");
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NormaEscopo", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Escopo", "Escopo")
                        .WithMany("NormaEscopos")
                        .HasForeignKey("EscopoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SGQ.Domain.Entities.Norma", "Norma")
                        .WithMany("NormaEscopos")
                        .HasForeignKey("NormaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SGQ.Domain.Entities.NormaTema", b =>
                {
                    b.HasOne("SGQ.Domain.Entities.Norma", "Norma")
                        .WithMany("NormaTemas")
                        .HasForeignKey("NormaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SGQ.Domain.Entities.Tema", "Tema")
                        .WithMany("NormaTemas")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
